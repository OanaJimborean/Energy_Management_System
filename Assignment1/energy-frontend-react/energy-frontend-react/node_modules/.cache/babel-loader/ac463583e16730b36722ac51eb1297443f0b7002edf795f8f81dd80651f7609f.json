{"ast":null,"code":"var _jsxFileName = \"D:\\\\AN4_SEMESTRUL1\\\\DS_Lab\\\\Assignment1\\\\energy-frontend-react\\\\energy-frontend-react\\\\src\\\\components\\\\UserDevice.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserDevice = () => {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [userId, setUserId] = useState(null); // State variable to store the user ID\n\n  useEffect(() => {\n    // Fetch the user ID when the component mounts (you need to implement this part)\n    fetchUserId();\n\n    // The user ID will be set in the state variable userId\n  }, []);\n  useEffect(() => {\n    // When the user ID is available, fetch the devices assigned to that user\n    if (userId !== null) {\n      fetchDevicesByUserId(userId);\n    }\n  }, [userId]);\n  const fetchUserId = () => {\n    // Implement this part to obtain the user ID of the logged-in user\n    // This depends on your authentication system and how you store user information\n    // For example, if you are using JSON Web Tokens (JWT), you can decode the token to get user information.\n    // You might need to use a state management library like Redux or useContext to make user data available here.\n    const token = localStorage.getItem('token');\n    const decodedToken = JSON.parse(atob(token.split('.')[1]));\n    const loggedInUserId = decodedToken.userId;\n    setUserId(loggedInUserId);\n  };\n  const fetchDevicesByUserId = userId => {\n    // Make an API request to your backend to fetch devices by user ID\n    fetch(`http://localhost:8081/device/getDevicesByUserId/${userId}`).then(response => {\n      if (response.status === 200) {\n        return response.json();\n      } else {\n        throw new Error('Failed to fetch devices by user ID');\n      }\n    }).then(data => {\n      setDevices(data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Devices Assigned to You\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: devices.map(device => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Device Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), \" \", device.device_name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Address:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), \" \", device.address, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), \" \", device.description, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Max Hourly:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), \" \", device.max_hourly]\n      }, device.deviceId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(UserDevice, \"Y9FTfHZjyMd3em+841hBg9HeAwU=\");\n_c = UserDevice;\nexport default UserDevice;\nvar _c;\n$RefreshReg$(_c, \"UserDevice\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","UserDevice","_s","devices","setDevices","userId","setUserId","fetchUserId","fetchDevicesByUserId","token","localStorage","getItem","decodedToken","JSON","parse","atob","split","loggedInUserId","fetch","then","response","status","json","Error","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","device","device_name","address","description","max_hourly","deviceId","_c","$RefreshReg$"],"sources":["D:/AN4_SEMESTRUL1/DS_Lab/Assignment1/energy-frontend-react/energy-frontend-react/src/components/UserDevice.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst UserDevice = () => {\r\n  const [devices, setDevices] = useState([]);\r\n  const [userId, setUserId] = useState(null); // State variable to store the user ID\r\n\r\n  useEffect(() => {\r\n    // Fetch the user ID when the component mounts (you need to implement this part)\r\n    fetchUserId();\r\n\r\n    // The user ID will be set in the state variable userId\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // When the user ID is available, fetch the devices assigned to that user\r\n    if (userId !== null) {\r\n      fetchDevicesByUserId(userId);\r\n    }\r\n  }, [userId]);\r\n\r\n  const fetchUserId = () => {\r\n    // Implement this part to obtain the user ID of the logged-in user\r\n    // This depends on your authentication system and how you store user information\r\n    // For example, if you are using JSON Web Tokens (JWT), you can decode the token to get user information.\r\n    // You might need to use a state management library like Redux or useContext to make user data available here.\r\n    const token = localStorage.getItem('token');\r\n    const decodedToken = JSON.parse(atob(token.split('.')[1]));\r\n    const loggedInUserId = decodedToken.userId;\r\n    setUserId(loggedInUserId);\r\n  };\r\n\r\n  const fetchDevicesByUserId = (userId) => {\r\n    // Make an API request to your backend to fetch devices by user ID\r\n    fetch(`http://localhost:8081/device/getDevicesByUserId/${userId}`)\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          return response.json();\r\n        } else {\r\n          throw new Error('Failed to fetch devices by user ID');\r\n        }\r\n      })\r\n      .then((data) => {\r\n        setDevices(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Devices Assigned to You</h2>\r\n      <ul>\r\n        {devices.map((device) => (\r\n          <li key={device.deviceId}>\r\n            <strong>Device Name:</strong> {device.device_name}\r\n            <br />\r\n            <strong>Address:</strong> {device.address}\r\n            <br />\r\n            <strong>Description:</strong> {device.description}\r\n            <br />\r\n            <strong>Max Hourly:</strong> {device.max_hourly}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserDevice;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}