{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import '../users-page.css';\n// import { toast } from 'react-toastify';\n\n// const UpdateUser = ({ userId }) => {\n//   const [editedUser, setEditedUser] = useState(null);\n//   const [message, setMessage] = useState(null);\n\n//   useEffect(() => {\n//     // Fetch the user data when the component mounts\n//     fetchUser(userId);\n//   }, [userId]);\n\n//   const fetchUser = (userId) => {\n//     // Fetch the user data from your backend\n//     const token = localStorage.getItem('token');\n//     fetch(`http://localhost:8082/user/getUsers`, {\n//       method: 'GET',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${token}`,\n//       },\n//     })\n//       .then((response) => {\n//         if (response.status === 200) {\n//           return response.json();\n//         } else if (response.status === 401) {\n//           // Handle Unauthorized access\n//           toast.error('Unauthorized access');\n//         } else {\n//           throw new Error('Failed to fetch data');\n//         }\n//       })\n//       .then((data) => {\n//         setEditedUser(data);\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   const handleUpdate = () => {\n//     if (editedUser) {\n//       const token = localStorage.getItem('token');\n//       fetch(`http://localhost:8082/user/update`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`,\n//         },\n//         body: JSON.stringify({\n//           name: editedUser.name,\n//           email: editedUser.email,\n//           // Include other fields as needed\n//         }),\n//       })\n//         .then((response) => {\n//           if (response.status === 200) {\n//             toast.success('User updated successfully.', {\n//               style: { background: '#90d490' },\n//               bodyClassName: 'custom-toast-content',\n//             });\n//           } else {\n//             toast.error('Failed to update user.', {\n//               style: { background: 'red' },\n//             });\n//           }\n//         })\n//         .catch((error) => {\n//           showMessage('An error occurred');\n//         });\n//     }\n//   };\n\n//   const showMessage = (text) => {\n//     setMessage(text);\n\n//     setTimeout(() => {\n//       setMessage(null);\n//     }, 2000);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Update User</h2>\n//       {message && <p className=\"message\">{message}</p>}\n//       {editedUser ? (\n//         <div>\n//             <label>Id:</label>\n//         <input\n//           type=\"text\"\n//           value={editedUser.userId} // Change name to username\n//           onChange={(e) =>\n//             setEditedUser({ ...editedUser, userId: e.target.value }) \n//           }\n//         />\n//           <label>Username:</label>\n//         <input\n//           type=\"text\"\n//           value={editedUser.username} // Change name to username\n//           onChange={(e) =>\n//             setEditedUser({ ...editedUser, username: e.target.value }) // Change name to username\n//           }\n//         />\n//           <label>Email:</label>\n//         <input\n//           type=\"text\"\n//           value={editedUser.email} // Change email to email\n//           onChange={(e) =>\n//             setEditedUser({ ...editedUser, email: e.target.value }) // Change email to email\n//           }\n//           />\n//           <label>Password:</label>\n//         <input\n//           type=\"text\"\n//           value={editedUser.password} // Match the backend field name\n//           onChange={(e) =>\n//             setEditedUser({ ...editedUser, password: e.target.value }) // Match the backend field name\n//           }\n//           />\n//         <label>Role:</label>\n//         <input\n//           type=\"text\"\n//           value={editedUser.role} // Match the backend field name\n//           onChange={(e) =>\n//             setEditedUser({ ...editedUser, role: e.target.value }) // Match the backend field name\n//           }\n//           />\n\n//           {/* Add other fields as needed */}\n//           <button onClick={handleUpdate}>Save</button>\n//         </div>\n//       ) : (\n//         <p>Loading user data...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default UpdateUser;","map":{"version":3,"names":[],"sources":["D:/AN4_SEMESTRUL1/DS_Lab/Assignment1/energy-frontend-react/energy-frontend-react/src/components/UpdateUser.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import '../users-page.css';\r\n// import { toast } from 'react-toastify';\r\n\r\n// const UpdateUser = ({ userId }) => {\r\n//   const [editedUser, setEditedUser] = useState(null);\r\n//   const [message, setMessage] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch the user data when the component mounts\r\n//     fetchUser(userId);\r\n//   }, [userId]);\r\n\r\n//   const fetchUser = (userId) => {\r\n//     // Fetch the user data from your backend\r\n//     const token = localStorage.getItem('token');\r\n//     fetch(`http://localhost:8082/user/getUsers`, {\r\n//       method: 'GET',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         'Authorization': `Bearer ${token}`,\r\n//       },\r\n//     })\r\n//       .then((response) => {\r\n//         if (response.status === 200) {\r\n//           return response.json();\r\n//         } else if (response.status === 401) {\r\n//           // Handle Unauthorized access\r\n//           toast.error('Unauthorized access');\r\n//         } else {\r\n//           throw new Error('Failed to fetch data');\r\n//         }\r\n//       })\r\n//       .then((data) => {\r\n//         setEditedUser(data);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error('Error:', error);\r\n//       });\r\n//   };\r\n\r\n//   const handleUpdate = () => {\r\n//     if (editedUser) {\r\n//       const token = localStorage.getItem('token');\r\n//       fetch(`http://localhost:8082/user/update`, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           'Authorization': `Bearer ${token}`,\r\n//         },\r\n//         body: JSON.stringify({\r\n//           name: editedUser.name,\r\n//           email: editedUser.email,\r\n//           // Include other fields as needed\r\n//         }),\r\n//       })\r\n//         .then((response) => {\r\n//           if (response.status === 200) {\r\n//             toast.success('User updated successfully.', {\r\n//               style: { background: '#90d490' },\r\n//               bodyClassName: 'custom-toast-content',\r\n//             });\r\n//           } else {\r\n//             toast.error('Failed to update user.', {\r\n//               style: { background: 'red' },\r\n//             });\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           showMessage('An error occurred');\r\n//         });\r\n//     }\r\n//   };\r\n\r\n//   const showMessage = (text) => {\r\n//     setMessage(text);\r\n\r\n//     setTimeout(() => {\r\n//       setMessage(null);\r\n//     }, 2000);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Update User</h2>\r\n//       {message && <p className=\"message\">{message}</p>}\r\n//       {editedUser ? (\r\n//         <div>\r\n//             <label>Id:</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={editedUser.userId} // Change name to username\r\n//           onChange={(e) =>\r\n//             setEditedUser({ ...editedUser, userId: e.target.value }) \r\n//           }\r\n//         />\r\n//           <label>Username:</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={editedUser.username} // Change name to username\r\n//           onChange={(e) =>\r\n//             setEditedUser({ ...editedUser, username: e.target.value }) // Change name to username\r\n//           }\r\n//         />\r\n//           <label>Email:</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={editedUser.email} // Change email to email\r\n//           onChange={(e) =>\r\n//             setEditedUser({ ...editedUser, email: e.target.value }) // Change email to email\r\n//           }\r\n//           />\r\n//           <label>Password:</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={editedUser.password} // Match the backend field name\r\n//           onChange={(e) =>\r\n//             setEditedUser({ ...editedUser, password: e.target.value }) // Match the backend field name\r\n//           }\r\n//           />\r\n//         <label>Role:</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={editedUser.role} // Match the backend field name\r\n//           onChange={(e) =>\r\n//             setEditedUser({ ...editedUser, role: e.target.value }) // Match the backend field name\r\n//           }\r\n//           />\r\n        \r\n//           {/* Add other fields as needed */}\r\n//           <button onClick={handleUpdate}>Save</button>\r\n//         </div>\r\n//       ) : (\r\n//         <p>Loading user data...</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UpdateUser;\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}