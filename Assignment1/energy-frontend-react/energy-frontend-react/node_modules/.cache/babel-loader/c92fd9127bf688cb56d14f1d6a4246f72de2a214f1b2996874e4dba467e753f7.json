{"ast":null,"code":"var _jsxFileName = \"D:\\\\AN4_SEMESTRUL1\\\\DS_Lab\\\\Assignment1\\\\energy-frontend-react\\\\energy-frontend-react\\\\src\\\\components\\\\UsersPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UsersPage = () => {\n  _s();\n  const [userRole, setUserRole] = useState(null);\n  useEffect(() => {\n    // Fetch the user's role from the token or your authentication mechanism\n    const token = localStorage.getItem('token'); // Assuming you store the token in localStorage\n\n    // Verify the user's role on the server or based on your authentication logic\n    // Set the user's role in the state\n    // For example, you might get the role from the token or make an API request to get the user's role\n    const userRoleFromToken = getUserRoleFromToken(token);\n    setUserRole(userRoleFromToken);\n  }, []);\n\n  // Function to get the user's role from the token (you should implement this)\n  const getUserRoleFromToken = token => {\n    // Implement logic to extract the user's role from the token\n    // Return the role, e.g., 'admin', 'user', etc.\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Welcome to the User Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), userRole === 'admin' ? /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/get-users\",\n      children: \"See All Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Access Restricted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(UsersPage, \"vPp0yqj+hRw1UlF3QGOL0H6Z92E=\");\n_c = UsersPage;\nexport default UsersPage;\nvar _c;\n$RefreshReg$(_c, \"UsersPage\");","map":{"version":3,"names":["React","useEffect","useState","Link","jsxDEV","_jsxDEV","UsersPage","_s","userRole","setUserRole","token","localStorage","getItem","userRoleFromToken","getUserRoleFromToken","children","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["D:/AN4_SEMESTRUL1/DS_Lab/Assignment1/energy-frontend-react/energy-frontend-react/src/components/UsersPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst UsersPage = () => {\r\n  const [userRole, setUserRole] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch the user's role from the token or your authentication mechanism\r\n    const token = localStorage.getItem('token'); // Assuming you store the token in localStorage\r\n\r\n    // Verify the user's role on the server or based on your authentication logic\r\n    // Set the user's role in the state\r\n    // For example, you might get the role from the token or make an API request to get the user's role\r\n    const userRoleFromToken = getUserRoleFromToken(token);\r\n\r\n    setUserRole(userRoleFromToken);\r\n  }, []);\r\n\r\n  // Function to get the user's role from the token (you should implement this)\r\n  const getUserRoleFromToken = (token) => {\r\n    // Implement logic to extract the user's role from the token\r\n    // Return the role, e.g., 'admin', 'user', etc.\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Welcome to the User Management Dashboard</h2>\r\n      {userRole === 'admin' ? (\r\n        <Link to=\"/get-users\">See All Users</Link>\r\n      ) : (\r\n        <p>Access Restricted</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;IAE7C;IACA;IACA;IACA,MAAMC,iBAAiB,GAAGC,oBAAoB,CAACJ,KAAK,CAAC;IAErDD,WAAW,CAACI,iBAAiB,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,oBAAoB,GAAIJ,KAAK,IAAK;IACtC;IACA;EAAA,CACD;EAED,oBACEL,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAAU,QAAA,EAAI;IAAwC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChDX,QAAQ,KAAK,OAAO,gBACnBH,OAAA,CAACF,IAAI;MAACiB,EAAE,EAAC,YAAY;MAAAL,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAE1Cd,OAAA;MAAAU,QAAA,EAAG;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACxB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACZ,EAAA,CA/BID,SAAS;AAAAe,EAAA,GAATf,SAAS;AAiCf,eAAeA,SAAS;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}