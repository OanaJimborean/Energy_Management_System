{"ast":null,"code":"var _jsxFileName = \"D:\\\\AN4_SEMESTRUL1\\\\DS_Lab\\\\Assignment1\\\\energy-frontend-react\\\\energy-frontend-react\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport '../chat.css';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const userEmail = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.email) || '';\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState('CHATROOM');\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\n  const [typingStatus, setTypingStatus] = useState('');\n  const [typingUsers, setIsTyping] = useState([]);\n  const [userData, setUserData] = useState({\n    username: userEmail,\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  const sendTypingEvent = () => {\n    if (stompClient && userData.username !== tab) {\n      const typingData = {\n        senderName: userData.username,\n        receiverName: tab,\n        status: 'TYPING'\n      };\n      stompClient.send('/app/typing', {}, JSON.stringify(typingData));\n    }\n  };\n  const onPrivateMessage = payload => {\n    var payloadData = JSON.parse(payload.body);\n    const senderChats = privateChats.get(payloadData.senderName) || [];\n    const updatedChats = [...senderChats, payloadData];\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\n  };\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      message: value\n    });\n  };\n\n  // const handleTyping = () => {\n  //   setIsTyping(true);\n  //   sendTypingEvent();\n\n  // };\n\n  // const handleTypingStopped = () => {\n  //   setIsTyping(false);\n  // };\n\n  // const onTypingReceived = (payload) => {\n  //   const typingData = JSON.parse(payload.body);\n  //   if (typingData.status === 'TYPING') {\n  //     const { senderName } = typingData;\n  //     if (!typingUsers.includes(senderName)) {\n  //       setIsTyping([...typingUsers, senderName]);\n  //     }\n  //   }\n  // };\n\n  const handleTyping = () => socket.emit('typing', `${localStorage.getItem('email')} is typing`);\n  /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    placeholder: \"Write message\",\n    className: \"message\",\n    value: message,\n    onChange: e => setMessage(e.target.value),\n    onKeyDown: handleTyping\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n  socket.on('typing', data => socket.broadcast.emit('typingResponse', data));\n  useEffect(() => {\n    connect();\n    console.log(userData);\n    fetchLoggedInUsers();\n    socket.on('typingResponse', data => setTypingStatus(data));\n  }, [socket]);\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8084/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n  const fetchLoggedInUsers = () => {\n    const token = localStorage.getItem('token');\n    fetch('http://localhost:8082/user/getLoggedInUsers', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => response.json()).then(data => {\n      setLoggedInUsers(data); // Update the state with logged-in users' data\n    }).catch(error => {\n      console.error('Error fetching logged-in users:', error);\n    });\n  };\n  const onConnected = () => {\n    setUserData({\n      ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    stompClient.subscribe('/user/' + userData.username + '/typing', onTypingReceived);\n    userJoin();\n  };\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: 'JOIN'\n    };\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setLoggedInUsers(prevUsers => [...prevUsers, payloadData.senderName]);\n        }\n        break;\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      console.log(chatMessage);\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n    }\n  };\n  const sendPrivateValue = () => {\n    if (stompClient && userData.username !== tab) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: stompClient && userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab('CHATROOM');\n            },\n            className: `member ${tab === 'CHATROOM' && 'active'}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && 'active'}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), tab === 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Someone is typing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this), tab !== 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [\"typingStatus=\", typingStatus, /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"BfyEjiGLzbIoOTK25cp2cEv0dzA=\", false, function () {\n  return [useLocation];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","useLocation","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s","_location$state","location","userEmail","state","email","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","loggedInUsers","setLoggedInUsers","typingStatus","setTypingStatus","typingUsers","setIsTyping","userData","setUserData","username","receivername","connected","message","sendTypingEvent","typingData","senderName","receiverName","status","send","JSON","stringify","onPrivateMessage","payload","payloadData","parse","body","senderChats","get","updatedChats","set","handleMessage","event","value","target","handleTyping","socket","emit","localStorage","getItem","type","placeholder","className","onChange","e","setMessage","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","on","data","broadcast","connect","console","log","fetchLoggedInUsers","Sock","onConnected","onError","token","fetch","method","headers","then","response","json","catch","error","subscribe","onMessageReceived","onTypingReceived","userJoin","chatMessage","err","prevUsers","push","sendValue","sendPrivateValue","children","onClick","keys","map","name","index","chat","_c","$RefreshReg$"],"sources":["D:/AN4_SEMESTRUL1/DS_Lab/Assignment1/energy-frontend-react/energy-frontend-react/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport '../chat.css';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nvar stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const location = useLocation();\r\n  const userEmail = location.state?.email || '';\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState('CHATROOM');\r\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\r\n  const [typingStatus, setTypingStatus] = useState('');\r\n  const [typingUsers, setIsTyping] = useState([]);\r\n  const [userData, setUserData] = useState({\r\n    username: userEmail,\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n  });\r\n\r\n  const sendTypingEvent = () => {\r\n    if (stompClient && userData.username !== tab) {\r\n      const typingData = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        status: 'TYPING',\r\n      };\r\n\r\n      stompClient.send('/app/typing', {}, JSON.stringify(typingData));\r\n    }\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    const senderChats = privateChats.get(payloadData.senderName) || [];\r\n    const updatedChats = [...senderChats, payloadData];\r\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\r\n  };\r\n\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  };\r\n\r\n  // const handleTyping = () => {\r\n  //   setIsTyping(true);\r\n  //   sendTypingEvent();\r\n\r\n  // };\r\n\r\n  // const handleTypingStopped = () => {\r\n  //   setIsTyping(false);\r\n  // };\r\n\r\n  \r\n\r\n  // const onTypingReceived = (payload) => {\r\n  //   const typingData = JSON.parse(payload.body);\r\n  //   if (typingData.status === 'TYPING') {\r\n  //     const { senderName } = typingData;\r\n  //     if (!typingUsers.includes(senderName)) {\r\n  //       setIsTyping([...typingUsers, senderName]);\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  const handleTyping = () =>\r\n    socket.emit('typing', `${localStorage.getItem('email')} is typing`);\r\n\r\n    <input\r\n          type=\"text\"\r\n          placeholder=\"Write message\"\r\n          className=\"message\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          onKeyDown={handleTyping}\r\n        />\r\n\r\n        socket.on('typing', (data) => socket.broadcast.emit('typingResponse', data));    \r\n\r\n  useEffect(() => {\r\n    connect();\r\n    console.log(userData);\r\n    fetchLoggedInUsers();\r\n    socket.on('typingResponse', (data) => setTypingStatus(data));\r\n  }, [socket]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8084/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n  };\r\n\r\n  const fetchLoggedInUsers = () => {\r\n    const token = localStorage.getItem('token');\r\n    fetch('http://localhost:8082/user/getLoggedInUsers', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setLoggedInUsers(data); // Update the state with logged-in users' data\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching logged-in users:', error);\r\n      });\r\n  };\r\n\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    stompClient.subscribe('/user/' + userData.username + '/typing', onTypingReceived);\r\n    userJoin();\r\n  };\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: 'JOIN',\r\n    };\r\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n\r\n  }\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setLoggedInUsers((prevUsers) => [...prevUsers, payloadData.senderName]);\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n      console.log(chatMessage);\r\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n    }\r\n  };\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient && userData.username !== tab) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {stompClient && userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li\r\n                onClick={() => {\r\n                  setTab('CHATROOM');\r\n                }}\r\n                className={`member ${tab === 'CHATROOM' && 'active'}`}\r\n              >\r\n                Chatroom\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li\r\n                  onClick={() => {\r\n                    setTab(name);\r\n                  }}\r\n                  className={`member ${tab === name && 'active'}`}\r\n                  key={index}\r\n                >\r\n                  {name}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {publicChats.map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <div className=\"typing-indicator\">\r\n              <p>Someone is typing...</p>\r\n              </div>\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {tab !== 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              typingStatus={typingStatus}\r\n              <ul className=\"chat-messages\">\r\n                {[...privateChats.get(tab)].map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendPrivateValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}