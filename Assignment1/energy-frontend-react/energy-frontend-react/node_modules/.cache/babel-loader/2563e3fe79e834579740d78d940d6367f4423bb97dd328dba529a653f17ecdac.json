{"ast":null,"code":"var _jsxFileName = \"D:\\\\AN4_SEMESTRUL1\\\\DS_Lab\\\\Assignment1\\\\energy-frontend-react\\\\energy-frontend-react\\\\src\\\\components\\\\ChatRoom.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport '../chat.css';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s2();\n  var _location$state,\n    _s = $RefreshSig$();\n  const location = useLocation();\n  const userEmail = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.email) || '';\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState('CHATROOM');\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\n  const [typingStatus, setTypingStatus] = useState('');\n  const [message, setMessage] = useState('');\n  const [receiverFocus, setReceiverFocus] = useState(false);\n  const [seenMessages, setSeenMessages] = useState(new Set());\n  _s(useEffect(_s(() => {\n    _s();\n    const connect = () => {\n      let Sock = new SockJS('http://localhost:8084/ws');\n      stompClient = over(Sock);\n      stompClient.connect({}, onConnected, onError);\n    };\n    const onConnected = () => {\n      setUserData({\n        ...userData,\n        connected: true\n      });\n      stompClient.subscribe('/chatroom/public', onMessageReceived);\n      stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n      stompClient.subscribe('/topic/typing', onTypingReceived);\n      userJoin();\n    };\n    const fetchLoggedInUsers = () => {\n      const token = localStorage.getItem('token');\n      fetch('http://localhost:8082/user/getLoggedInUsers', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      }).then(response => response.json()).then(data => {\n        setLoggedInUsers(data);\n      }).catch(error => {\n        console.error('Error fetching logged-in users:', error);\n      });\n    };\n    const userJoin = () => {\n      var chatMessage = {\n        senderName: userEmail,\n        // Assuming userEmail is defined or passed to this component\n        status: 'JOIN'\n      };\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n    };\n    const onMessageReceived = payload => {\n      var payloadData = JSON.parse(payload.body);\n      switch (payloadData.status) {\n        case \"JOIN\":\n          if (!privateChats.get(payloadData.senderName)) {\n            privateChats.set(payloadData.senderName, []);\n            setLoggedInUsers(prevUsers => [...prevUsers, payloadData.senderName]);\n          }\n          break;\n        case \"MESSAGE\":\n          publicChats.push(payloadData);\n          setPublicChats([...publicChats]);\n          break;\n      }\n    };\n    const onPrivateMessage = payload => {\n      var payloadData = JSON.parse(payload.body);\n      const senderChats = privateChats.get(payloadData.senderName) || [];\n      const updatedChats = [...senderChats, payloadData];\n      setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\n      setTypingStatus('');\n    };\n    const onError = err => {\n      console.log(err);\n    };\n    const handleMessage = event => {\n      const {\n        value\n      } = event.target;\n      setUserData({\n        ...userData,\n        message: value\n      });\n    };\n    const sendValue = () => {\n      if (stompClient && stompClient.connected) {\n        var chatMessage = {\n          senderName: userData.username,\n          message: userData.message,\n          status: 'MESSAGE'\n        };\n        console.log(chatMessage);\n        stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n        setUserData({\n          ...userData,\n          message: ''\n        });\n        setTypingStatus('');\n      } else {\n        console.error('WebSocket connection is not established.');\n        // Handle the case when the WebSocket connection is not established\n        // For instance, you might display a message to the user or attempt to reconnect\n      }\n    };\n\n    const sendPrivateValue = () => {\n      if (stompClient && stompClient.connected && userData.username !== tab) {\n        var chatMessage = {\n          senderName: userData.username,\n          receiverName: tab,\n          message: userData.message,\n          status: 'MESSAGE'\n        };\n        if (userData.username !== tab) {\n          privateChats.get(tab).push(chatMessage);\n          setPrivateChats(new Map(privateChats));\n        }\n        stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n        setUserData({\n          ...userData,\n          message: ''\n        });\n        setTypingStatus('');\n      } else {\n        console.error('WebSocket connection is not established.');\n        // Handle the case when the WebSocket connection is not established\n        // For instance, you might display a message to the user or attempt to reconnect\n      }\n    };\n\n    const handleFocus = () => {\n      if (stompClient) {\n        const focusData = {\n          senderName: userData.receivername,\n          receiverName: userData.username,\n          status: 'FOCUS'\n        };\n        stompClient.send('/app/focus', {}, JSON.stringify(focusData));\n      }\n    };\n    const [userData, setUserData] = useState({\n      username: userEmail,\n      receivername: '',\n      connected: false,\n      message: ''\n    });\n    const sendTypingEvent = () => {\n      if (stompClient) {\n        const typingData = {\n          senderName: userData.username,\n          receiverName: tab,\n          status: 'TYPING'\n        };\n        stompClient.send('/app/typing', {}, JSON.stringify(typingData));\n      }\n    };\n    const handleTyping = event => {\n      setMessage(event.target.value);\n      sendTypingEvent();\n      if (tab !== 'CHATROOM' && seenMessages.has(tab)) {\n        seenMessages.delete(tab);\n        setSeenMessages(new Set([...seenMessages]));\n      }\n    };\n    /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"input-message\",\n      placeholder: \"Enter the message\",\n      value: userData.message,\n      onChange: handleMessage,\n      onFocus: () => {\n        setReceiverFocus(true);\n        handleFocus(); // Notify the sender when the receiver focuses\n      },\n\n      onBlur: () => setReceiverFocus(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 3\n    }, this);\n    const onTypingReceived = payload => {\n      const typingData = JSON.parse(payload.body);\n      if (typingData.status === 'TYPING') {\n        if (tab === 'CHATROOM' && typingData.receiverName === 'CHATROOM') {\n          setTypingStatus(typingData.senderName === userData.username ? '' : `${typingData.senderName} is typing...`);\n        } else if (typingData.receiverName === userData.username) {\n          setTypingStatus(`${typingData.senderName} is typing...`);\n        } else {\n          setTypingStatus('');\n        }\n      }\n    };\n    const handleMessageView = chatId => {\n      if (tab === 'CHATROOM' && chatId) {\n        const seenMessage = {\n          senderName: userData.username,\n          receiverName: tab,\n          // Assuming 'tab' represents the chat room or user's name\n          status: 'SEEN',\n          messageId: chatId // Assuming 'chatId' is the ID of the message\n        };\n\n        stompClient.send('/app/seen', {}, JSON.stringify(seenMessage));\n        // Update the seen status in the frontend\n        const updatedSeenMessages = new Set(seenMessages);\n        updatedSeenMessages.add(chatId);\n        setSeenMessages(updatedSeenMessages);\n      }\n    };\n    connect();\n    console.log(userData);\n    fetchLoggedInUsers();\n  }, \"rjWOePYfAdkAiFF6Kn05+rKDITg=\"), []), \"rjWOePYfAdkAiFF6Kn05+rKDITg=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: stompClient && userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab('CHATROOM');\n            },\n            className: `member ${tab === 'CHATROOM' && 'active'}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && 'active'}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this), tab === 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            onClick: () => handleMessageView(chat.id),\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 23\n            }, this), index === publicChats.length - 1 && seenMessages.has(chat.id) && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"seen-notification\",\n              children: \"Seen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: typingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage,\n            onKeyDown: handleTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 13\n      }, this), tab !== 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: typingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage,\n            onKeyDown: handleTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatRoom, \"A6Vew9vR/lDBCDkFcRqBuQe63NA=\", false, function () {\n  return [useLocation];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","useLocation","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s2","_location$state","_s","$RefreshSig$","location","userEmail","state","email","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","loggedInUsers","setLoggedInUsers","typingStatus","setTypingStatus","message","setMessage","receiverFocus","setReceiverFocus","seenMessages","setSeenMessages","Set","connect","Sock","onConnected","onError","setUserData","userData","connected","subscribe","onMessageReceived","username","onPrivateMessage","onTypingReceived","userJoin","fetchLoggedInUsers","token","localStorage","getItem","fetch","method","headers","then","response","json","data","catch","error","console","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","prevUsers","push","senderChats","updatedChats","err","log","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleFocus","focusData","receivername","sendTypingEvent","typingData","handleTyping","has","delete","type","className","placeholder","onChange","onFocus","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","handleMessageView","chatId","seenMessage","messageId","updatedSeenMessages","add","children","onClick","keys","map","name","index","chat","id","length","onKeyDown","_c","$RefreshReg$"],"sources":["D:/AN4_SEMESTRUL1/DS_Lab/Assignment1/energy-frontend-react/energy-frontend-react/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport '../chat.css';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nvar stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const location = useLocation();\r\n  const userEmail = location.state?.email || '';\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState('CHATROOM');\r\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\r\n  const [typingStatus, setTypingStatus] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [receiverFocus, setReceiverFocus] = useState(false);\r\n  const [seenMessages, setSeenMessages] = useState(new Set());\r\n\r\n  useEffect(() => {\r\n    const connect = () => {\r\n      let Sock = new SockJS('http://localhost:8084/ws');\r\n      stompClient = over(Sock);\r\n      stompClient.connect({}, onConnected, onError);\r\n    };\r\n  \r\n    const onConnected = () => {\r\n      setUserData({ ...userData, connected: true });\r\n      stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n      stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n      stompClient.subscribe('/topic/typing', onTypingReceived);\r\n      userJoin();\r\n    };\r\n  \r\n    const fetchLoggedInUsers = () => {\r\n      const token = localStorage.getItem('token');\r\n      fetch('http://localhost:8082/user/getLoggedInUsers', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`,\r\n        },\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setLoggedInUsers(data); \r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching logged-in users:', error);\r\n        });\r\n    };\r\n  \r\n    const userJoin = () => {\r\n      var chatMessage = {\r\n        senderName: userEmail, // Assuming userEmail is defined or passed to this component\r\n        status: 'JOIN',\r\n      };\r\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n    };\r\n  \r\n    \r\n  \r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setLoggedInUsers((prevUsers) => [...prevUsers, payloadData.senderName]);\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  };\r\n\r\n  \r\n\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    const senderChats = privateChats.get(payloadData.senderName) || [];\r\n    const updatedChats = [...senderChats, payloadData];\r\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\r\n    setTypingStatus('');\r\n  };  \r\n  \r\n  const onError = (err) => {\r\n    console.log(err);\r\n  };\r\n\r\n\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  };\r\n\r\n\r\n  const sendValue = () => {\r\n    if (stompClient && stompClient.connected) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n      console.log(chatMessage);\r\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n      setTypingStatus('');\r\n    } else {\r\n      console.error('WebSocket connection is not established.');\r\n      // Handle the case when the WebSocket connection is not established\r\n      // For instance, you might display a message to the user or attempt to reconnect\r\n    }\r\n  };\r\n  \r\n  const sendPrivateValue = () => {\r\n    if (stompClient && stompClient.connected && userData.username !== tab) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n  \r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n      setTypingStatus('');\r\n    } else {\r\n      console.error('WebSocket connection is not established.');\r\n      // Handle the case when the WebSocket connection is not established\r\n      // For instance, you might display a message to the user or attempt to reconnect\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n\r\n\r\n  const handleFocus = () => {\r\n    if (stompClient) {\r\n      const focusData = {\r\n        senderName: userData.receivername,\r\n        receiverName: userData.username,\r\n        status: 'FOCUS',\r\n      };\r\n      stompClient.send('/app/focus', {}, JSON.stringify(focusData));\r\n    }\r\n  };\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: userEmail,\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n  });\r\n\r\n\r\n  const sendTypingEvent = () => {\r\n    if (stompClient) {\r\n      const typingData = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        status: 'TYPING',\r\n      };\r\n      stompClient.send('/app/typing', {}, JSON.stringify(typingData));\r\n    }\r\n  };\r\n\r\n  const handleTyping = (event) => {\r\n    setMessage(event.target.value);\r\n    sendTypingEvent();\r\n    if (tab !== 'CHATROOM' && seenMessages.has(tab)) {\r\n      seenMessages.delete(tab);\r\n      setSeenMessages(new Set([...seenMessages]));\r\n    }\r\n  };\r\n\r\n\r\n  <input\r\n    type=\"text\"\r\n    className=\"input-message\"\r\n    placeholder=\"Enter the message\"\r\n    value={userData.message}\r\n    onChange={handleMessage}\r\n    onFocus={() => {\r\n      setReceiverFocus(true);\r\n      handleFocus(); // Notify the sender when the receiver focuses\r\n    }}\r\n    onBlur={() => setReceiverFocus(false)}\r\n  />\r\n\r\n\r\n  \r\n\r\n  const onTypingReceived = (payload) => {\r\n    const typingData = JSON.parse(payload.body);\r\n    if (typingData.status === 'TYPING') {\r\n      if (tab === 'CHATROOM' && typingData.receiverName === 'CHATROOM') {\r\n        setTypingStatus(typingData.senderName === userData.username ? '' : `${typingData.senderName} is typing...`);\r\n      } else if (typingData.receiverName === userData.username) {\r\n        setTypingStatus(`${typingData.senderName} is typing...`);\r\n      } else {\r\n        setTypingStatus('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMessageView = (chatId) => {\r\n    if (tab === 'CHATROOM' && chatId) {\r\n      const seenMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab, // Assuming 'tab' represents the chat room or user's name\r\n        status: 'SEEN',\r\n        messageId: chatId, // Assuming 'chatId' is the ID of the message\r\n      };\r\n      stompClient.send('/app/seen', {}, JSON.stringify(seenMessage));\r\n      // Update the seen status in the frontend\r\n      const updatedSeenMessages = new Set(seenMessages);\r\n      updatedSeenMessages.add(chatId);\r\n      setSeenMessages(updatedSeenMessages);\r\n    }\r\n  };\r\n\r\n  connect();\r\n    console.log(userData);\r\n    fetchLoggedInUsers();\r\n  }, []); \r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {stompClient && userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li\r\n                onClick={() => {\r\n                  setTab('CHATROOM');\r\n                }}\r\n                className={`member ${tab === 'CHATROOM' && 'active'}`}\r\n              >\r\n                Chatroom\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li\r\n                  onClick={() => {\r\n                    setTab(name);\r\n                  }}\r\n                  className={`member ${tab === name && 'active'}`}\r\n                  key={index}\r\n                >\r\n                  {name}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {publicChats.map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                    onClick={() => handleMessageView(chat.id)}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                    {index === publicChats.length - 1 && seenMessages.has(chat.id) && (\r\n                      <span className=\"seen-notification\">Seen</span>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <div className=\"typing-indicator\">\r\n                <p>{typingStatus}</p>\r\n              </div>\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                  onKeyDown={handleTyping}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {tab !== 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {[...privateChats.get(tab)].map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <div className=\"typing-indicator\">\r\n                <p>{typingStatus}</p>\r\n              </div>\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                  onKeyDown={handleTyping}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendPrivateValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}