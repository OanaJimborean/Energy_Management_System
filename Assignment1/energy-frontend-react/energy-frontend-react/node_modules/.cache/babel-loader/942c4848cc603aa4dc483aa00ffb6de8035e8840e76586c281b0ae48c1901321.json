{"ast":null,"code":"var _jsxFileName = \"D:\\\\AN4_SEMESTRUL1\\\\DS_Lab\\\\Assignment1\\\\energy-frontend-react\\\\energy-frontend-react\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport '../chat.css';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const userEmail = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.email) || '';\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState('CHATROOM');\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\n  const [typingStatus, setTypingStatus] = useState('');\n  const [message, setMessage] = useState('');\n  const [receiverFocus, setReceiverFocus] = useState(false);\n  const [seenMessages, setSeenMessages] = useState(new Set());\n\n  // Function to send notification to the sender when the receiver focuses on the input field\n  const connect = () => {\n    const encodedToken = localStorage.getItem('token');\n    const webSocket = new WebSocket('ws://localhost:8084/ws', 'v10.stomp, v11.stomp', {\n      perMessageDeflate: false,\n      headers: {\n        Authorization: `Basic ${encodedToken}`\n      }\n    });\n    webSocket.onopen = () => {\n      console.log('Connection has been established.');\n      stompClient = over(webSocket);\n      stompClient.connect({}, onConnected, onError);\n    };\n    webSocket.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    webSocket.onclose = event => {\n      console.log('WebSocket connection closed:', event);\n    };\n  };\n  const onConnected = () => {\n    setUserData({\n      ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    stompClient.subscribe('/topic/typing', onTypingReceived);\n    userJoin();\n  };\n  useEffect(() => {\n    connect();\n    console.log(userData);\n    fetchLoggedInUsers();\n  }, []);\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: 'JOIN'\n    };\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  };\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setLoggedInUsers(prevUsers => [...prevUsers, payloadData.senderName]);\n        }\n        break;\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  const onPrivateMessage = payload => {\n    var payloadData = JSON.parse(payload.body);\n    const senderChats = privateChats.get(payloadData.senderName) || [];\n    const updatedChats = [...senderChats, payloadData];\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\n    setTypingStatus('');\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      message: value\n    });\n  };\n  const sendValue = () => {\n    if (stompClient && stompClient.connected) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      console.log(chatMessage);\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n      setTypingStatus('');\n    } else {\n      console.error('WebSocket connection is not established.');\n      // Handle the case when the WebSocket connection is not established\n      // For instance, you might display a message to the user or attempt to reconnect\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient && stompClient.connected && userData.username !== tab) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n      setTypingStatus('');\n    } else {\n      console.error('WebSocket connection is not established.');\n      // Handle the case when the WebSocket connection is not established\n      // For instance, you might display a message to the user or attempt to reconnect\n    }\n  };\n\n  const fetchLoggedInUsers = () => {\n    //connect();\n    const token = localStorage.getItem('token');\n    fetch('http://localhost:8082/user/getLoggedInUsers', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => response.json()).then(data => {\n      setLoggedInUsers(data); // Update the state with logged-in users' data\n    }).catch(error => {\n      console.error('Error fetching logged-in users:', error);\n    });\n  };\n  const handleFocus = () => {\n    if (stompClient) {\n      const focusData = {\n        senderName: userData.receivername,\n        receiverName: userData.username,\n        status: 'FOCUS'\n      };\n      stompClient.send('/app/focus', {}, JSON.stringify(focusData));\n    }\n  };\n  const [userData, setUserData] = useState({\n    username: userEmail,\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  const sendTypingEvent = () => {\n    if (stompClient) {\n      const typingData = {\n        senderName: userData.username,\n        receiverName: tab,\n        status: 'TYPING'\n      };\n      stompClient.send('/app/typing', {}, JSON.stringify(typingData));\n    }\n  };\n  const handleTyping = event => {\n    setMessage(event.target.value);\n    sendTypingEvent();\n    if (tab !== 'CHATROOM' && seenMessages.has(tab)) {\n      seenMessages.delete(tab);\n      setSeenMessages(new Set([...seenMessages]));\n    }\n  };\n  /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    className: \"input-message\",\n    placeholder: \"Enter the message\",\n    value: userData.message,\n    onChange: handleMessage,\n    onFocus: () => {\n      setReceiverFocus(true);\n      handleFocus(); // Notify the sender when the receiver focuses\n    },\n\n    onBlur: () => setReceiverFocus(false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 3\n  }, this);\n  const onTypingReceived = payload => {\n    const typingData = JSON.parse(payload.body);\n    if (typingData.status === 'TYPING') {\n      if (tab === 'CHATROOM' && typingData.receiverName === 'CHATROOM') {\n        setTypingStatus(typingData.senderName === userData.username ? '' : `${typingData.senderName} is typing...`);\n      } else if (typingData.receiverName === userData.username) {\n        setTypingStatus(`${typingData.senderName} is typing...`);\n      } else {\n        setTypingStatus('');\n      }\n    }\n  };\n  const handleMessageView = chatId => {\n    if (tab === 'CHATROOM' && chatId) {\n      const seenMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        // Assuming 'tab' represents the chat room or user's name\n        status: 'SEEN',\n        messageId: chatId // Assuming 'chatId' is the ID of the message\n      };\n\n      stompClient.send('/app/seen', {}, JSON.stringify(seenMessage));\n      // Update the seen status in the frontend\n      const updatedSeenMessages = new Set(seenMessages);\n      updatedSeenMessages.add(chatId);\n      setSeenMessages(updatedSeenMessages);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: stompClient && userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab('CHATROOM');\n            },\n            className: `member ${tab === 'CHATROOM' && 'active'}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && 'active'}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), tab === 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            onClick: () => handleMessageView(chat.id),\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 23\n            }, this), index === publicChats.length - 1 && seenMessages.has(chat.id) && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"seen-notification\",\n              children: \"Seen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: typingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage,\n            onKeyDown: handleTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 13\n      }, this), tab !== 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: typingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage,\n            onKeyDown: handleTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"kG9SETQZyf3ZTL+lgUQ/mN5inuI=\", false, function () {\n  return [useLocation];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","useLocation","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s","_location$state","location","userEmail","state","email","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","loggedInUsers","setLoggedInUsers","typingStatus","setTypingStatus","message","setMessage","receiverFocus","setReceiverFocus","seenMessages","setSeenMessages","Set","connect","encodedToken","localStorage","getItem","webSocket","WebSocket","perMessageDeflate","headers","Authorization","onopen","console","log","onConnected","onError","onerror","error","onclose","event","setUserData","userData","connected","subscribe","onMessageReceived","username","onPrivateMessage","onTypingReceived","userJoin","fetchLoggedInUsers","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","prevUsers","push","senderChats","updatedChats","err","handleMessage","value","target","sendValue","sendPrivateValue","receiverName","token","fetch","method","then","response","json","data","catch","handleFocus","focusData","receivername","sendTypingEvent","typingData","handleTyping","has","delete","type","className","placeholder","onChange","onFocus","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","handleMessageView","chatId","seenMessage","messageId","updatedSeenMessages","add","children","onClick","keys","map","name","index","chat","id","length","onKeyDown","_c","$RefreshReg$"],"sources":["D:/AN4_SEMESTRUL1/DS_Lab/Assignment1/energy-frontend-react/energy-frontend-react/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport '../chat.css';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nvar stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const location = useLocation();\r\n  const userEmail = location.state?.email || '';\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState('CHATROOM');\r\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\r\n  const [typingStatus, setTypingStatus] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [receiverFocus, setReceiverFocus] = useState(false);\r\n  const [seenMessages, setSeenMessages] = useState(new Set());\r\n\r\n  // Function to send notification to the sender when the receiver focuses on the input field\r\n  const connect = () => {\r\n    const encodedToken = localStorage.getItem('token');\r\n    const webSocket = new WebSocket('ws://localhost:8084/ws','v10.stomp, v11.stomp', {\r\n      perMessageDeflate: false,\r\n      headers: {\r\n        Authorization: `Basic ${encodedToken}`,\r\n      },\r\n    });\r\n  \r\n    webSocket.onopen = () => {\r\n      console.log('Connection has been established.');\r\n      stompClient = over(webSocket);\r\n      stompClient.connect({}, onConnected, onError);\r\n    };\r\n  \r\n    webSocket.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n  \r\n    webSocket.onclose = (event) => {\r\n      console.log('WebSocket connection closed:', event);\r\n    };\r\n  };\r\n  \r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    stompClient.subscribe('/topic/typing', onTypingReceived);\r\n    userJoin();\r\n\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    connect();\r\n    console.log(userData);\r\n    fetchLoggedInUsers();\r\n  }, []);\r\n\r\n\r\n  \r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: 'JOIN',\r\n    };\r\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n  };\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setLoggedInUsers((prevUsers) => [...prevUsers, payloadData.senderName]);\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  };\r\n\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    const senderChats = privateChats.get(payloadData.senderName) || [];\r\n    const updatedChats = [...senderChats, payloadData];\r\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\r\n    setTypingStatus('');\r\n  };  \r\n  \r\n  const onError = (err) => {\r\n    console.log(err);\r\n  };\r\n\r\n\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  };\r\n\r\n\r\n  const sendValue = () => {\r\n    if (stompClient && stompClient.connected) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n      console.log(chatMessage);\r\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n      setTypingStatus('');\r\n    } else {\r\n      console.error('WebSocket connection is not established.');\r\n      // Handle the case when the WebSocket connection is not established\r\n      // For instance, you might display a message to the user or attempt to reconnect\r\n    }\r\n  };\r\n  \r\n  const sendPrivateValue = () => {\r\n    if (stompClient && stompClient.connected && userData.username !== tab) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n  \r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n      setTypingStatus('');\r\n    } else {\r\n      console.error('WebSocket connection is not established.');\r\n      // Handle the case when the WebSocket connection is not established\r\n      // For instance, you might display a message to the user or attempt to reconnect\r\n    }\r\n  };\r\n  \r\n  \r\n  const fetchLoggedInUsers = () => {\r\n    //connect();\r\n    const token = localStorage.getItem('token');\r\n    fetch('http://localhost:8082/user/getLoggedInUsers', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setLoggedInUsers(data); // Update the state with logged-in users' data\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching logged-in users:', error);\r\n      });\r\n  };\r\n\r\n\r\n\r\n  const handleFocus = () => {\r\n    if (stompClient) {\r\n      const focusData = {\r\n        senderName: userData.receivername,\r\n        receiverName: userData.username,\r\n        status: 'FOCUS',\r\n      };\r\n      stompClient.send('/app/focus', {}, JSON.stringify(focusData));\r\n    }\r\n  };\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: userEmail,\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n  });\r\n\r\n\r\n  const sendTypingEvent = () => {\r\n    if (stompClient) {\r\n      const typingData = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        status: 'TYPING',\r\n      };\r\n      stompClient.send('/app/typing', {}, JSON.stringify(typingData));\r\n    }\r\n  };\r\n\r\n  const handleTyping = (event) => {\r\n    setMessage(event.target.value);\r\n    sendTypingEvent();\r\n    if (tab !== 'CHATROOM' && seenMessages.has(tab)) {\r\n      seenMessages.delete(tab);\r\n      setSeenMessages(new Set([...seenMessages]));\r\n    }\r\n  };\r\n\r\n\r\n  <input\r\n    type=\"text\"\r\n    className=\"input-message\"\r\n    placeholder=\"Enter the message\"\r\n    value={userData.message}\r\n    onChange={handleMessage}\r\n    onFocus={() => {\r\n      setReceiverFocus(true);\r\n      handleFocus(); // Notify the sender when the receiver focuses\r\n    }}\r\n    onBlur={() => setReceiverFocus(false)}\r\n  />\r\n\r\n\r\n  \r\n\r\n  const onTypingReceived = (payload) => {\r\n    const typingData = JSON.parse(payload.body);\r\n    if (typingData.status === 'TYPING') {\r\n      if (tab === 'CHATROOM' && typingData.receiverName === 'CHATROOM') {\r\n        setTypingStatus(typingData.senderName === userData.username ? '' : `${typingData.senderName} is typing...`);\r\n      } else if (typingData.receiverName === userData.username) {\r\n        setTypingStatus(`${typingData.senderName} is typing...`);\r\n      } else {\r\n        setTypingStatus('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMessageView = (chatId) => {\r\n    if (tab === 'CHATROOM' && chatId) {\r\n      const seenMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab, // Assuming 'tab' represents the chat room or user's name\r\n        status: 'SEEN',\r\n        messageId: chatId, // Assuming 'chatId' is the ID of the message\r\n      };\r\n      stompClient.send('/app/seen', {}, JSON.stringify(seenMessage));\r\n      // Update the seen status in the frontend\r\n      const updatedSeenMessages = new Set(seenMessages);\r\n      updatedSeenMessages.add(chatId);\r\n      setSeenMessages(updatedSeenMessages);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {stompClient && userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li\r\n                onClick={() => {\r\n                  setTab('CHATROOM');\r\n                }}\r\n                className={`member ${tab === 'CHATROOM' && 'active'}`}\r\n              >\r\n                Chatroom\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li\r\n                  onClick={() => {\r\n                    setTab(name);\r\n                  }}\r\n                  className={`member ${tab === name && 'active'}`}\r\n                  key={index}\r\n                >\r\n                  {name}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {publicChats.map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                    onClick={() => handleMessageView(chat.id)}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                    {index === publicChats.length - 1 && seenMessages.has(chat.id) && (\r\n                      <span className=\"seen-notification\">Seen</span>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <div className=\"typing-indicator\">\r\n                <p>{typingStatus}</p>\r\n              </div>\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                  onKeyDown={handleTyping}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {tab !== 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {[...privateChats.get(tab)].map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <div className=\"typing-indicator\">\r\n                <p>{typingStatus}</p>\r\n              </div>\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                  onKeyDown={handleTyping}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendPrivateValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}