{"ast":null,"code":"var _jsxFileName = \"D:\\\\AN4_SEMESTRUL1\\\\DS_Lab\\\\Assignment1\\\\energy-frontend-react\\\\energy-frontend-react\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport '../chat.css';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const userEmail = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.email) || '';\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState('CHATROOM');\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\n  const [typingStatus, setTypingStatus] = useState('');\n  const [message, setMessage] = useState('');\n  const [receiverFocus, setReceiverFocus] = useState(false);\n  const [seenMessages, setSeenMessages] = useState(new Set());\n\n  // Function to send notification to the sender when the receiver focuses on the input field\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8084/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n    Sock.onopen = () => {\n      console.log('Connection has been established.');\n      stompClient = over(webSocket);\n      stompClient.connect({}, onConnected, onError);\n    };\n    Sock.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    Sock.onclose = event => {\n      console.log('WebSocket connection closed:', event);\n    };\n  };\n  // const connect = () => {\n  //   const encodedToken = /* your encoded token here */;\n  //   const webSocket = new WebSocket('http://localhost:8084/ws', {\n  //     perMessageDeflate: false,\n  //     headers: {\n  //       Authorization: `Basic ${encodedToken}`,\n  //     },\n  //   });\n\n  //   webSocket.onopen = () => {\n  //     console.log('Connection has been established.');\n  //     stompClient = over(webSocket);\n  //     stompClient.connect({}, onConnected, onError);\n  //   };\n\n  //   webSocket.onerror = (error) => {\n  //     console.error('WebSocket error:', error);\n  //   };\n\n  //   webSocket.onclose = (event) => {\n  //     console.log('WebSocket connection closed:', event);\n  //   };\n  // };\n\n  const onConnected = () => {\n    setUserData({\n      ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    stompClient.subscribe('/topic/typing', onTypingReceived);\n    userJoin();\n  };\n  useEffect(() => {\n    connect();\n    console.log(userData);\n    fetchLoggedInUsers();\n  }, []);\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: 'JOIN'\n    };\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  };\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setLoggedInUsers(prevUsers => [...prevUsers, payloadData.senderName]);\n        }\n        break;\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  const onPrivateMessage = payload => {\n    var payloadData = JSON.parse(payload.body);\n    const senderChats = privateChats.get(payloadData.senderName) || [];\n    const updatedChats = [...senderChats, payloadData];\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\n    setTypingStatus('');\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      message: value\n    });\n  };\n  const sendValue = () => {\n    if (stompClient && stompClient.connected) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      console.log(chatMessage);\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n      setTypingStatus('');\n    } else {\n      console.error('WebSocket connection is not established.');\n      // Handle the case when the WebSocket connection is not established\n      // For instance, you might display a message to the user or attempt to reconnect\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient && stompClient.connected && userData.username !== tab) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n      setTypingStatus('');\n    } else {\n      console.error('WebSocket connection is not established.');\n      // Handle the case when the WebSocket connection is not established\n      // For instance, you might display a message to the user or attempt to reconnect\n    }\n  };\n\n  const fetchLoggedInUsers = () => {\n    //connect();\n    const token = localStorage.getItem('token');\n    fetch('http://localhost:8082/user/getLoggedInUsers', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => response.json()).then(data => {\n      setLoggedInUsers(data); // Update the state with logged-in users' data\n    }).catch(error => {\n      console.error('Error fetching logged-in users:', error);\n    });\n  };\n  const handleFocus = () => {\n    if (stompClient) {\n      const focusData = {\n        senderName: userData.receivername,\n        receiverName: userData.username,\n        status: 'FOCUS'\n      };\n      stompClient.send('/app/focus', {}, JSON.stringify(focusData));\n    }\n  };\n  const [userData, setUserData] = useState({\n    username: userEmail,\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  const sendTypingEvent = () => {\n    if (stompClient) {\n      const typingData = {\n        senderName: userData.username,\n        receiverName: tab,\n        status: 'TYPING'\n      };\n      stompClient.send('/app/typing', {}, JSON.stringify(typingData));\n    }\n  };\n  const handleTyping = event => {\n    setMessage(event.target.value);\n    sendTypingEvent();\n    if (tab !== 'CHATROOM' && seenMessages.has(tab)) {\n      seenMessages.delete(tab);\n      setSeenMessages(new Set([...seenMessages]));\n    }\n  };\n  /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    className: \"input-message\",\n    placeholder: \"Enter the message\",\n    value: userData.message,\n    onChange: handleMessage,\n    onFocus: () => {\n      setReceiverFocus(true);\n      handleFocus(); // Notify the sender when the receiver focuses\n    },\n\n    onBlur: () => setReceiverFocus(false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 3\n  }, this);\n  const onTypingReceived = payload => {\n    const typingData = JSON.parse(payload.body);\n    if (typingData.status === 'TYPING') {\n      if (tab === 'CHATROOM' && typingData.receiverName === 'CHATROOM') {\n        setTypingStatus(typingData.senderName === userData.username ? '' : `${typingData.senderName} is typing...`);\n      } else if (typingData.receiverName === userData.username) {\n        setTypingStatus(`${typingData.senderName} is typing...`);\n      } else {\n        setTypingStatus('');\n      }\n    }\n  };\n  const handleMessageView = chatId => {\n    if (tab === 'CHATROOM' && chatId) {\n      const seenMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        // Assuming 'tab' represents the chat room or user's name\n        status: 'SEEN',\n        messageId: chatId // Assuming 'chatId' is the ID of the message\n      };\n\n      stompClient.send('/app/seen', {}, JSON.stringify(seenMessage));\n      // Update the seen status in the frontend\n      const updatedSeenMessages = new Set(seenMessages);\n      updatedSeenMessages.add(chatId);\n      setSeenMessages(updatedSeenMessages);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: stompClient && userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab('CHATROOM');\n            },\n            className: `member ${tab === 'CHATROOM' && 'active'}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && 'active'}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), tab === 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            onClick: () => handleMessageView(chat.id),\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 23\n            }, this), index === publicChats.length - 1 && seenMessages.has(chat.id) && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"seen-notification\",\n              children: \"Seen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: typingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage,\n            onKeyDown: handleTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 13\n      }, this), tab !== 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: typingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage,\n            onKeyDown: handleTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"kG9SETQZyf3ZTL+lgUQ/mN5inuI=\", false, function () {\n  return [useLocation];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","useLocation","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s","_location$state","location","userEmail","state","email","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","loggedInUsers","setLoggedInUsers","typingStatus","setTypingStatus","message","setMessage","receiverFocus","setReceiverFocus","seenMessages","setSeenMessages","Set","connect","Sock","onConnected","onError","onopen","console","log","webSocket","onerror","error","onclose","event","setUserData","userData","connected","subscribe","onMessageReceived","username","onPrivateMessage","onTypingReceived","userJoin","fetchLoggedInUsers","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","prevUsers","push","senderChats","updatedChats","err","handleMessage","value","target","sendValue","sendPrivateValue","receiverName","token","localStorage","getItem","fetch","method","headers","then","response","json","data","catch","handleFocus","focusData","receivername","sendTypingEvent","typingData","handleTyping","has","delete","type","className","placeholder","onChange","onFocus","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","handleMessageView","chatId","seenMessage","messageId","updatedSeenMessages","add","children","onClick","keys","map","name","index","chat","id","length","onKeyDown","_c","$RefreshReg$"],"sources":["D:/AN4_SEMESTRUL1/DS_Lab/Assignment1/energy-frontend-react/energy-frontend-react/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport '../chat.css';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nvar stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const location = useLocation();\r\n  const userEmail = location.state?.email || '';\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState('CHATROOM');\r\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\r\n  const [typingStatus, setTypingStatus] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [receiverFocus, setReceiverFocus] = useState(false);\r\n  const [seenMessages, setSeenMessages] = useState(new Set());\r\n\r\n  // Function to send notification to the sender when the receiver focuses on the input field\r\nconst connect = () => {\r\n    let Sock = new SockJS('http://localhost:8084/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n    Sock.onopen = () => {\r\n      console.log('Connection has been established.');\r\n      stompClient = over(webSocket);\r\n      stompClient.connect({}, onConnected, onError);\r\n    };\r\n  \r\n    Sock.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n  \r\n    Sock.onclose = (event) => {\r\n      console.log('WebSocket connection closed:', event);\r\n    };\r\n  };\r\n  // const connect = () => {\r\n  //   const encodedToken = /* your encoded token here */;\r\n  //   const webSocket = new WebSocket('http://localhost:8084/ws', {\r\n  //     perMessageDeflate: false,\r\n  //     headers: {\r\n  //       Authorization: `Basic ${encodedToken}`,\r\n  //     },\r\n  //   });\r\n  \r\n  //   webSocket.onopen = () => {\r\n  //     console.log('Connection has been established.');\r\n  //     stompClient = over(webSocket);\r\n  //     stompClient.connect({}, onConnected, onError);\r\n  //   };\r\n  \r\n  //   webSocket.onerror = (error) => {\r\n  //     console.error('WebSocket error:', error);\r\n  //   };\r\n  \r\n  //   webSocket.onclose = (event) => {\r\n  //     console.log('WebSocket connection closed:', event);\r\n  //   };\r\n  // };\r\n  \r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    stompClient.subscribe('/topic/typing', onTypingReceived);\r\n    userJoin();\r\n\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    connect();\r\n    console.log(userData);\r\n    fetchLoggedInUsers();\r\n  }, []);\r\n\r\n\r\n  \r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: 'JOIN',\r\n    };\r\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n  };\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setLoggedInUsers((prevUsers) => [...prevUsers, payloadData.senderName]);\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  };\r\n\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    const senderChats = privateChats.get(payloadData.senderName) || [];\r\n    const updatedChats = [...senderChats, payloadData];\r\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\r\n    setTypingStatus('');\r\n  };  \r\n  \r\n  const onError = (err) => {\r\n    console.log(err);\r\n  };\r\n\r\n\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  };\r\n\r\n\r\n  const sendValue = () => {\r\n    if (stompClient && stompClient.connected) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n      console.log(chatMessage);\r\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n      setTypingStatus('');\r\n    } else {\r\n      console.error('WebSocket connection is not established.');\r\n      // Handle the case when the WebSocket connection is not established\r\n      // For instance, you might display a message to the user or attempt to reconnect\r\n    }\r\n  };\r\n  \r\n  const sendPrivateValue = () => {\r\n    if (stompClient && stompClient.connected && userData.username !== tab) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n  \r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n      setTypingStatus('');\r\n    } else {\r\n      console.error('WebSocket connection is not established.');\r\n      // Handle the case when the WebSocket connection is not established\r\n      // For instance, you might display a message to the user or attempt to reconnect\r\n    }\r\n  };\r\n  \r\n  \r\n  const fetchLoggedInUsers = () => {\r\n    //connect();\r\n    const token = localStorage.getItem('token');\r\n    fetch('http://localhost:8082/user/getLoggedInUsers', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setLoggedInUsers(data); // Update the state with logged-in users' data\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching logged-in users:', error);\r\n      });\r\n  };\r\n\r\n\r\n\r\n  const handleFocus = () => {\r\n    if (stompClient) {\r\n      const focusData = {\r\n        senderName: userData.receivername,\r\n        receiverName: userData.username,\r\n        status: 'FOCUS',\r\n      };\r\n      stompClient.send('/app/focus', {}, JSON.stringify(focusData));\r\n    }\r\n  };\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: userEmail,\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n  });\r\n\r\n\r\n  const sendTypingEvent = () => {\r\n    if (stompClient) {\r\n      const typingData = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        status: 'TYPING',\r\n      };\r\n      stompClient.send('/app/typing', {}, JSON.stringify(typingData));\r\n    }\r\n  };\r\n\r\n  const handleTyping = (event) => {\r\n    setMessage(event.target.value);\r\n    sendTypingEvent();\r\n    if (tab !== 'CHATROOM' && seenMessages.has(tab)) {\r\n      seenMessages.delete(tab);\r\n      setSeenMessages(new Set([...seenMessages]));\r\n    }\r\n  };\r\n\r\n\r\n  <input\r\n    type=\"text\"\r\n    className=\"input-message\"\r\n    placeholder=\"Enter the message\"\r\n    value={userData.message}\r\n    onChange={handleMessage}\r\n    onFocus={() => {\r\n      setReceiverFocus(true);\r\n      handleFocus(); // Notify the sender when the receiver focuses\r\n    }}\r\n    onBlur={() => setReceiverFocus(false)}\r\n  />\r\n\r\n\r\n  \r\n\r\n  const onTypingReceived = (payload) => {\r\n    const typingData = JSON.parse(payload.body);\r\n    if (typingData.status === 'TYPING') {\r\n      if (tab === 'CHATROOM' && typingData.receiverName === 'CHATROOM') {\r\n        setTypingStatus(typingData.senderName === userData.username ? '' : `${typingData.senderName} is typing...`);\r\n      } else if (typingData.receiverName === userData.username) {\r\n        setTypingStatus(`${typingData.senderName} is typing...`);\r\n      } else {\r\n        setTypingStatus('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMessageView = (chatId) => {\r\n    if (tab === 'CHATROOM' && chatId) {\r\n      const seenMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab, // Assuming 'tab' represents the chat room or user's name\r\n        status: 'SEEN',\r\n        messageId: chatId, // Assuming 'chatId' is the ID of the message\r\n      };\r\n      stompClient.send('/app/seen', {}, JSON.stringify(seenMessage));\r\n      // Update the seen status in the frontend\r\n      const updatedSeenMessages = new Set(seenMessages);\r\n      updatedSeenMessages.add(chatId);\r\n      setSeenMessages(updatedSeenMessages);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {stompClient && userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li\r\n                onClick={() => {\r\n                  setTab('CHATROOM');\r\n                }}\r\n                className={`member ${tab === 'CHATROOM' && 'active'}`}\r\n              >\r\n                Chatroom\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li\r\n                  onClick={() => {\r\n                    setTab(name);\r\n                  }}\r\n                  className={`member ${tab === name && 'active'}`}\r\n                  key={index}\r\n                >\r\n                  {name}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {publicChats.map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                    onClick={() => handleMessageView(chat.id)}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                    {index === publicChats.length - 1 && seenMessages.has(chat.id) && (\r\n                      <span className=\"seen-notification\">Seen</span>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <div className=\"typing-indicator\">\r\n                <p>{typingStatus}</p>\r\n              </div>\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                  onKeyDown={handleTyping}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {tab !== 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {[...privateChats.get(tab)].map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <div className=\"typing-indicator\">\r\n                <p>{typingStatus}</p>\r\n              </div>\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                  onKeyDown={handleTyping}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendPrivateValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}