{"ast":null,"code":"var _jsxFileName = \"D:\\\\AN4_SEMESTRUL1\\\\DS_Lab\\\\Assignment1\\\\energy-frontend-react\\\\energy-frontend-react\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport '../chat.css';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const userEmail = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.email) || '';\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState('CHATROOM');\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\n  const [typingStatus, setTypingStatus] = useState('');\n  const [message, setMessage] = useState('');\n  const [receiverFocus, setReceiverFocus] = useState(false);\n  const [seenMessages, setSeenMessages] = useState(new Set());\n\n  // Function to send notification to the sender when the receiver focuses on the input field\n\n  useEffect(() => {\n    //connect();\n    console.log(userData);\n    fetchLoggedInUsers();\n  }, []);\n  const handleFocus = () => {\n    if (stompClient) {\n      const focusData = {\n        senderName: userData.receivername,\n        receiverName: userData.username,\n        status: 'FOCUS'\n      };\n      stompClient.send('/app/focus', {}, JSON.stringify(focusData));\n    }\n  };\n  const [userData, setUserData] = useState({\n    username: userEmail,\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  const sendTypingEvent = () => {\n    if (stompClient) {\n      const typingData = {\n        senderName: userData.username,\n        receiverName: tab,\n        status: 'TYPING'\n      };\n      stompClient.send('/app/typing', {}, JSON.stringify(typingData));\n    }\n  };\n  const handleTyping = event => {\n    setMessage(event.target.value);\n    sendTypingEvent();\n    if (tab !== 'CHATROOM' && seenMessages.has(tab)) {\n      seenMessages.delete(tab);\n      setSeenMessages(new Set([...seenMessages]));\n    }\n  };\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8084/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n  const onConnected = () => {\n    setUserData({\n      ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    stompClient.subscribe('/topic/typing', onTypingReceived);\n    userJoin();\n  };\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      message: value\n    });\n  };\n  /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    className: \"input-message\",\n    placeholder: \"Enter the message\",\n    value: userData.message,\n    onChange: handleMessage,\n    onFocus: () => {\n      setReceiverFocus(true);\n      handleFocus(); // Notify the sender when the receiver focuses\n    },\n\n    onBlur: () => setReceiverFocus(false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 3\n  }, this);\n  const fetchLoggedInUsers = () => {\n    connect();\n    const token = localStorage.getItem('token');\n    fetch('http://localhost:8082/user/getLoggedInUsers', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => response.json()).then(data => {\n      setLoggedInUsers(data); // Update the state with logged-in users' data\n    }).catch(error => {\n      console.error('Error fetching logged-in users:', error);\n    });\n  };\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: 'JOIN'\n    };\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setLoggedInUsers(prevUsers => [...prevUsers, payloadData.senderName]);\n        }\n        break;\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  const onPrivateMessage = payload => {\n    var payloadData = JSON.parse(payload.body);\n    const senderChats = privateChats.get(payloadData.senderName) || [];\n    const updatedChats = [...senderChats, payloadData];\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\n    setTypingStatus('');\n  };\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      console.log(chatMessage);\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n      setTypingStatus('');\n    }\n  };\n  const sendPrivateValue = () => {\n    if (stompClient && userData.username !== tab) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n      setTypingStatus('');\n    }\n  };\n  const onTypingReceived = payload => {\n    const typingData = JSON.parse(payload.body);\n    if (typingData.status === 'TYPING') {\n      if (tab === 'CHATROOM' && typingData.receiverName === 'CHATROOM') {\n        setTypingStatus(typingData.senderName === userData.username ? '' : `${typingData.senderName} is typing...`);\n      } else if (typingData.receiverName === userData.username) {\n        setTypingStatus(`${typingData.senderName} is typing...`);\n      } else {\n        setTypingStatus('');\n      }\n    }\n  };\n  const handleMessageView = chatId => {\n    if (tab === 'CHATROOM' && chatId) {\n      const seenMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        // Assuming 'tab' represents the chat room or user's name\n        status: 'SEEN',\n        messageId: chatId // Assuming 'chatId' is the ID of the message\n      };\n\n      stompClient.send('/app/seen', {}, JSON.stringify(seenMessage));\n      // Update the seen status in the frontend\n      const updatedSeenMessages = new Set(seenMessages);\n      updatedSeenMessages.add(chatId);\n      setSeenMessages(updatedSeenMessages);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: stompClient && userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab('CHATROOM');\n            },\n            className: `member ${tab === 'CHATROOM' && 'active'}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && 'active'}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), tab === 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            onClick: () => handleMessageView(chat.id),\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 23\n            }, this), index === publicChats.length - 1 && seenMessages.has(chat.id) && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"seen-notification\",\n              children: \"Seen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: typingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage,\n            onKeyDown: handleTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 13\n      }, this), tab !== 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: typingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage,\n            onKeyDown: handleTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"kG9SETQZyf3ZTL+lgUQ/mN5inuI=\", false, function () {\n  return [useLocation];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","useLocation","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s","_location$state","location","userEmail","state","email","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","loggedInUsers","setLoggedInUsers","typingStatus","setTypingStatus","message","setMessage","receiverFocus","setReceiverFocus","seenMessages","setSeenMessages","Set","console","log","userData","fetchLoggedInUsers","handleFocus","focusData","senderName","receivername","receiverName","username","status","send","JSON","stringify","setUserData","connected","sendTypingEvent","typingData","handleTyping","event","target","value","has","delete","connect","Sock","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","onTypingReceived","userJoin","handleMessage","type","className","placeholder","onChange","onFocus","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","token","localStorage","getItem","fetch","method","headers","then","response","json","data","catch","error","chatMessage","err","payload","payloadData","parse","body","get","set","prevUsers","push","senderChats","updatedChats","sendValue","sendPrivateValue","handleMessageView","chatId","seenMessage","messageId","updatedSeenMessages","add","children","onClick","keys","map","name","index","chat","id","length","onKeyDown","_c","$RefreshReg$"],"sources":["D:/AN4_SEMESTRUL1/DS_Lab/Assignment1/energy-frontend-react/energy-frontend-react/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport '../chat.css';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nvar stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const location = useLocation();\r\n  const userEmail = location.state?.email || '';\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState('CHATROOM');\r\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\r\n  const [typingStatus, setTypingStatus] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [receiverFocus, setReceiverFocus] = useState(false);\r\n  const [seenMessages, setSeenMessages] = useState(new Set());\r\n\r\n  // Function to send notification to the sender when the receiver focuses on the input field\r\n\r\n  useEffect(() => {\r\n    //connect();\r\n    console.log(userData);\r\n    fetchLoggedInUsers();\r\n  }, []);\r\n  \r\n  const handleFocus = () => {\r\n    if (stompClient) {\r\n      const focusData = {\r\n        senderName: userData.receivername,\r\n        receiverName: userData.username,\r\n        status: 'FOCUS',\r\n      };\r\n      stompClient.send('/app/focus', {}, JSON.stringify(focusData));\r\n    }\r\n  };\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: userEmail,\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n  });\r\n\r\n\r\n  const sendTypingEvent = () => {\r\n    if (stompClient) {\r\n      const typingData = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        status: 'TYPING',\r\n      };\r\n      stompClient.send('/app/typing', {}, JSON.stringify(typingData));\r\n    }\r\n  };\r\n\r\n  const handleTyping = (event) => {\r\n    setMessage(event.target.value);\r\n    sendTypingEvent();\r\n    if (tab !== 'CHATROOM' && seenMessages.has(tab)) {\r\n      seenMessages.delete(tab);\r\n      setSeenMessages(new Set([...seenMessages]));\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8084/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n  };\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    stompClient.subscribe('/topic/typing', onTypingReceived);\r\n    userJoin();\r\n  };\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  };\r\n\r\n  <input\r\n    type=\"text\"\r\n    className=\"input-message\"\r\n    placeholder=\"Enter the message\"\r\n    value={userData.message}\r\n    onChange={handleMessage}\r\n    onFocus={() => {\r\n      setReceiverFocus(true);\r\n      handleFocus(); // Notify the sender when the receiver focuses\r\n    }}\r\n    onBlur={() => setReceiverFocus(false)}\r\n  />\r\n\r\n  const fetchLoggedInUsers = () => {\r\n    connect();\r\n    const token = localStorage.getItem('token');\r\n    fetch('http://localhost:8082/user/getLoggedInUsers', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setLoggedInUsers(data); // Update the state with logged-in users' data\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching logged-in users:', error);\r\n      });\r\n  };\r\n\r\n \r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: 'JOIN',\r\n    };\r\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  };\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setLoggedInUsers((prevUsers) => [...prevUsers, payloadData.senderName]);\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    const senderChats = privateChats.get(payloadData.senderName) || [];\r\n    const updatedChats = [...senderChats, payloadData];\r\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\r\n    setTypingStatus('');\r\n  };\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n      console.log(chatMessage);\r\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n      setTypingStatus('');\r\n    }\r\n  };\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient && userData.username !== tab) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n      setTypingStatus('');\r\n    }\r\n  };\r\n\r\n  const onTypingReceived = (payload) => {\r\n    const typingData = JSON.parse(payload.body);\r\n    if (typingData.status === 'TYPING') {\r\n      if (tab === 'CHATROOM' && typingData.receiverName === 'CHATROOM') {\r\n        setTypingStatus(typingData.senderName === userData.username ? '' : `${typingData.senderName} is typing...`);\r\n      } else if (typingData.receiverName === userData.username) {\r\n        setTypingStatus(`${typingData.senderName} is typing...`);\r\n      } else {\r\n        setTypingStatus('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMessageView = (chatId) => {\r\n    if (tab === 'CHATROOM' && chatId) {\r\n      const seenMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab, // Assuming 'tab' represents the chat room or user's name\r\n        status: 'SEEN',\r\n        messageId: chatId, // Assuming 'chatId' is the ID of the message\r\n      };\r\n      stompClient.send('/app/seen', {}, JSON.stringify(seenMessage));\r\n      // Update the seen status in the frontend\r\n      const updatedSeenMessages = new Set(seenMessages);\r\n      updatedSeenMessages.add(chatId);\r\n      setSeenMessages(updatedSeenMessages);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {stompClient && userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li\r\n                onClick={() => {\r\n                  setTab('CHATROOM');\r\n                }}\r\n                className={`member ${tab === 'CHATROOM' && 'active'}`}\r\n              >\r\n                Chatroom\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li\r\n                  onClick={() => {\r\n                    setTab(name);\r\n                  }}\r\n                  className={`member ${tab === name && 'active'}`}\r\n                  key={index}\r\n                >\r\n                  {name}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {publicChats.map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                    onClick={() => handleMessageView(chat.id)}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                    {index === publicChats.length - 1 && seenMessages.has(chat.id) && (\r\n                      <span className=\"seen-notification\">Seen</span>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <div className=\"typing-indicator\">\r\n                <p>{typingStatus}</p>\r\n              </div>\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                  onKeyDown={handleTyping}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {tab !== 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {[...privateChats.get(tab)].map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <div className=\"typing-indicator\">\r\n                <p>{typingStatus}</p>\r\n              </div>\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                  onKeyDown={handleTyping}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendPrivateValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}