{"ast":null,"code":"var _jsxFileName = \"D:\\\\AN4_SEMESTRUL1\\\\DS_Lab\\\\Assignment1\\\\energy-frontend-react\\\\energy-frontend-react\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport '../chat.css';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const userEmail = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.email) || '';\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState('CHATROOM');\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\n  const [userData, setUserData] = useState({\n    username: userEmail,\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    connect();\n    console.log(userData);\n    fetchLoggedInUsers();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8084/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n  const fetchLoggedInUsers = () => {\n    const token = localStorage.getItem('token');\n    fetch('http://localhost:8082/user/getLoggedInUsers', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => response.json()).then(data => {\n      setLoggedInUsers(data); // Update the state with logged-in users' data\n    }).catch(error => {\n      console.error('Error fetching logged-in users:', error);\n    });\n  };\n  const onConnected = () => {\n    setUserData({\n      ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: 'JOIN'\n    };\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case 'JOIN':\n        if (!privateChats.get(payloadData.senderName)) {\n          setPrivateChats(new Map(privateChats.set(payloadData.senderName, [])));\n        }\n        break;\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  const onPrivateMessage = payload => {\n    var payloadData = JSON.parse(payload.body);\n    const senderChats = privateChats.get(payloadData.senderName) || [];\n    const updatedChats = [...senderChats, payloadData];\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\n  };\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      message: value\n    });\n  };\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      console.log(chatMessage);\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n    }\n  };\n  const sendPrivateValue = () => {\n    if (stompClient && userData.username !== tab) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n      stompClient.subscribe('/user/' + tab + '/private', onSelectedUserPrivateMessage);\n      setUserData({\n        ...userData,\n        message: ''\n      });\n    }\n  };\n  const onSelectedUserPrivateMessage = payload => {\n    const payloadData = JSON.parse(payload.body);\n\n    // Assuming the payload contains necessary data like senderName, message, etc.\n    const receivedMessage = {\n      senderName: payloadData.senderName,\n      message: payloadData.message\n      // Include any additional data you need from the payload\n    };\n\n    // Update the private chats for the selected user\n    const updatedPrivateChats = [...privateChats.get(tab), receivedMessage];\n    setPrivateChats(new Map(privateChats.set(tab, updatedPrivateChats)));\n\n    // Perform any other actions or state updates based on the received message\n    // For example, you might update UI, notifications, etc.\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: stompClient && userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab('CHATROOM');\n            },\n            className: `member ${tab === 'CHATROOM' && 'active'}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), loggedInUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(user.email); // Set the tab to the selected user's email\n            },\n\n            className: `member ${tab === user.email && 'active'}`,\n            children: user.email\n          }, user.userId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this)), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && 'active'}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), tab === 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this), tab !== 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"75MFTzvCcMmvN7zmuPNgAOpkkt4=\", false, function () {\n  return [useLocation];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","useLocation","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s","_location$state","location","userEmail","state","email","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","loggedInUsers","setLoggedInUsers","userData","setUserData","username","receivername","connected","message","connect","console","log","fetchLoggedInUsers","Sock","onConnected","onError","token","localStorage","getItem","fetch","method","headers","then","response","json","data","catch","error","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","err","payload","payloadData","parse","body","get","set","push","senderChats","updatedChats","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","onSelectedUserPrivateMessage","receivedMessage","updatedPrivateChats","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","user","userId","keys","name","index","chat","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["D:/AN4_SEMESTRUL1/DS_Lab/Assignment1/energy-frontend-react/energy-frontend-react/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport '../chat.css';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nvar stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const location = useLocation();\r\n  const userEmail = location.state?.email || '';\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState('CHATROOM');\r\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\r\n\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: userEmail,\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    connect();\r\n    console.log(userData);\r\n    fetchLoggedInUsers();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8084/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n  };\r\n\r\n  const fetchLoggedInUsers = () => {\r\n    const token = localStorage.getItem('token');\r\n    fetch('http://localhost:8082/user/getLoggedInUsers', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setLoggedInUsers(data); // Update the state with logged-in users' data\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching logged-in users:', error);\r\n      });\r\n  };\r\n\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  };\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: 'JOIN',\r\n    };\r\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n\r\n  }\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case 'JOIN':\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          setPrivateChats(new Map(privateChats.set(payloadData.senderName, [])));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    const senderChats = privateChats.get(payloadData.senderName) || [];\r\n    const updatedChats = [...senderChats, payloadData];\r\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\r\n  };\r\n\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  };\r\n\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n      console.log(chatMessage);\r\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n    }\r\n  };\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient && userData.username !== tab) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\r\n      stompClient.subscribe('/user/' + tab + '/private', onSelectedUserPrivateMessage);\r\n      setUserData({ ...userData, message: '' });\r\n    }\r\n  };\r\n  const onSelectedUserPrivateMessage = (payload) => {\r\n    const payloadData = JSON.parse(payload.body);\r\n    \r\n    // Assuming the payload contains necessary data like senderName, message, etc.\r\n    const receivedMessage = {\r\n      senderName: payloadData.senderName,\r\n      message: payloadData.message,\r\n      // Include any additional data you need from the payload\r\n    };\r\n  \r\n    // Update the private chats for the selected user\r\n    const updatedPrivateChats = [...privateChats.get(tab), receivedMessage];\r\n    setPrivateChats(new Map(privateChats.set(tab, updatedPrivateChats)));\r\n  \r\n    // Perform any other actions or state updates based on the received message\r\n    // For example, you might update UI, notifications, etc.\r\n  };\r\n  \r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {stompClient && userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n          <ul>\r\n            {/* Display the Chatroom option */}\r\n            <li\r\n              onClick={() => {\r\n                setTab('CHATROOM');\r\n              }}\r\n              className={`member ${tab === 'CHATROOM' && 'active'}`}\r\n            >\r\n              Chatroom\r\n            </li>\r\n            {/* Display the list of logged-in users */}\r\n            {loggedInUsers.map((user) => (\r\n              <li\r\n                onClick={() => {\r\n                  setTab(user.email); // Set the tab to the selected user's email\r\n                }}\r\n                className={`member ${tab === user.email && 'active'}`}\r\n                key={user.userId}\r\n              >\r\n                {user.email}\r\n              </li>\r\n            ))}\r\n            {/* Display the private chats */}\r\n            {[...privateChats.keys()].map((name, index) => (\r\n              <li\r\n                onClick={() => {\r\n                  setTab(name);\r\n                }}\r\n                className={`member ${tab === name && 'active'}`}\r\n                key={index}\r\n              >\r\n                {name}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          </div>\r\n          {tab === 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {publicChats.map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {tab !== 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {[...privateChats.get(tab)].map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendPrivateValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}