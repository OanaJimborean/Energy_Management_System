{"ast":null,"code":"var _jsxFileName = \"D:\\\\AN4_SEMESTRUL1\\\\DS_Lab\\\\Assignment1\\\\energy-frontend-react\\\\energy-frontend-react\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport '../chat.css';\nimport { useLocation } from 'react-router-dom';\nimport io from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const userEmail = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.email) || '';\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState('CHATROOM');\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\n  const [typingStatus, setTypingStatus] = useState('');\n  const [message, setMessage] = useState('');\n  const [receiverFocus, setReceiverFocus] = useState(false);\n  const [seenMessages, setSeenMessages] = useState(new Set());\n  const [socket, setSocket] = useState(null);\n\n  // Function to send notification to the sender when the receiver focuses on the input field\n  const handleFocus = () => {\n    if (stompClient) {\n      const focusData = {\n        senderName: userData.receivername,\n        receiverName: userData.username,\n        status: 'FOCUS'\n      };\n      stompClient.send('/app/focus', {}, JSON.stringify(focusData));\n    }\n  };\n  const [userData, setUserData] = useState({\n    username: userEmail,\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  const sendTypingEvent = () => {\n    if (stompClient) {\n      const typingData = {\n        senderName: userData.username,\n        receiverName: tab,\n        status: 'TYPING'\n      };\n      stompClient.send('/app/typing', {}, JSON.stringify(typingData));\n    }\n  };\n  const handleTyping = event => {\n    setMessage(event.target.value);\n    sendTypingEvent();\n    if (tab !== 'CHATROOM' && seenMessages.has(tab)) {\n      seenMessages.delete(tab);\n      setSeenMessages(new Set([...seenMessages]));\n    }\n  };\n  useEffect(() => {\n    // Establish a socket connection when the component mounts\n    const newSocket = io('your_socket_server_url');\n    setSocket(newSocket);\n\n    // Set up event listeners\n    if (newSocket) {\n      newSocket.on('msg', payload => {\n        setMessage(prevMessages => [...prevMessages, payload.msg]);\n      });\n    }\n\n    // Cleanup function to remove event listeners and disconnect the socket when the component unmounts\n    return () => {\n      if (newSocket) {\n        newSocket.disconnect();\n        newSocket.off('msg');\n      }\n    };\n  }, []);\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8084/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      message: value\n    });\n  };\n  /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    className: \"input-message\",\n    placeholder: \"Enter the message\",\n    value: userData.message,\n    onChange: handleMessage,\n    onFocus: () => {\n      setReceiverFocus(true);\n      handleFocus(); // Notify the sender when the receiver focuses\n    },\n\n    onBlur: () => setReceiverFocus(false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 3\n  }, this);\n  const fetchLoggedInUsers = () => {\n    const token = localStorage.getItem('token');\n    fetch('http://localhost:8082/user/getLoggedInUsers', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => response.json()).then(data => {\n      setLoggedInUsers(data); // Update the state with logged-in users' data\n    }).catch(error => {\n      console.error('Error fetching logged-in users:', error);\n    });\n  };\n  const onConnected = () => {\n    setUserData({\n      ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    stompClient.subscribe('/topic/typing', onTypingReceived);\n    userJoin();\n  };\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: 'JOIN'\n    };\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setLoggedInUsers(prevUsers => [...prevUsers, payloadData.senderName]);\n        }\n        break;\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  const onPrivateMessage = payload => {\n    var payloadData = JSON.parse(payload.body);\n    const senderChats = privateChats.get(payloadData.senderName) || [];\n    const updatedChats = [...senderChats, payloadData];\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\n    setTypingStatus('');\n  };\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      console.log(chatMessage);\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n      setTypingStatus('');\n    }\n  };\n  const sendPrivateValue = () => {\n    if (stompClient && userData.username !== tab) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n      setTypingStatus('');\n    }\n  };\n  const onTypingReceived = payload => {\n    const typingData = JSON.parse(payload.body);\n    if (typingData.status === 'TYPING') {\n      if (tab === 'CHATROOM' && typingData.receiverName === 'CHATROOM') {\n        setTypingStatus(typingData.senderName === userData.username ? '' : `${typingData.senderName} is typing...`);\n      } else if (typingData.receiverName === userData.username) {\n        setTypingStatus(`${typingData.senderName} is typing...`);\n      } else {\n        setTypingStatus('');\n      }\n    }\n  };\n  const handleMessageView = chatId => {\n    if (tab === 'CHATROOM' && chatId) {\n      const seenMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        // Assuming 'tab' represents the chat room or user's name\n        status: 'SEEN',\n        messageId: chatId // Assuming 'chatId' is the ID of the message\n      };\n\n      stompClient.send('/app/seen', {}, JSON.stringify(seenMessage));\n      // Update the seen status in the frontend\n      const updatedSeenMessages = new Set(seenMessages);\n      updatedSeenMessages.add(chatId);\n      setSeenMessages(updatedSeenMessages);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: stompClient && userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab('CHATROOM');\n            },\n            className: `member ${tab === 'CHATROOM' && 'active'}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && 'active'}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), tab === 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            onClick: () => handleMessageView(chat.id),\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 23\n            }, this), index === publicChats.length - 1 && seenMessages.has(chat.id) && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"seen-notification\",\n              children: \"Seen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: typingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage,\n            onKeyDown: handleTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 13\n      }, this), tab !== 'CHATROOM' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && 'self'}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: typingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage,\n            onKeyDown: handleTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"xT6BFL2iVWMkM5Rpto/7++nZHJ0=\", false, function () {\n  return [useLocation];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","useLocation","io","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s","_location$state","location","userEmail","state","email","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","loggedInUsers","setLoggedInUsers","typingStatus","setTypingStatus","message","setMessage","receiverFocus","setReceiverFocus","seenMessages","setSeenMessages","Set","socket","setSocket","handleFocus","focusData","senderName","userData","receivername","receiverName","username","status","send","JSON","stringify","setUserData","connected","sendTypingEvent","typingData","handleTyping","event","target","value","has","delete","newSocket","on","payload","prevMessages","msg","disconnect","off","connect","Sock","onConnected","onError","handleMessage","type","className","placeholder","onChange","onFocus","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","fetchLoggedInUsers","token","localStorage","getItem","fetch","method","headers","then","response","json","data","catch","error","console","subscribe","onMessageReceived","onPrivateMessage","onTypingReceived","userJoin","chatMessage","err","log","payloadData","parse","body","get","set","prevUsers","push","senderChats","updatedChats","sendValue","sendPrivateValue","handleMessageView","chatId","seenMessage","messageId","updatedSeenMessages","add","children","onClick","keys","map","name","index","chat","id","length","onKeyDown","_c","$RefreshReg$"],"sources":["D:/AN4_SEMESTRUL1/DS_Lab/Assignment1/energy-frontend-react/energy-frontend-react/src/components/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport '../chat.css';\r\nimport { useLocation } from 'react-router-dom';\r\nimport io from 'sockjs-client';\r\n\r\nvar stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const location = useLocation();\r\n  const userEmail = location.state?.email || '';\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState('CHATROOM');\r\n  const [loggedInUsers, setLoggedInUsers] = useState([]);\r\n  const [typingStatus, setTypingStatus] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [receiverFocus, setReceiverFocus] = useState(false);\r\n  const [seenMessages, setSeenMessages] = useState(new Set());\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  // Function to send notification to the sender when the receiver focuses on the input field\r\n  const handleFocus = () => {\r\n    if (stompClient) {\r\n      const focusData = {\r\n        senderName: userData.receivername,\r\n        receiverName: userData.username,\r\n        status: 'FOCUS',\r\n      };\r\n      stompClient.send('/app/focus', {}, JSON.stringify(focusData));\r\n    }\r\n  };\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: userEmail,\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n  });\r\n\r\n\r\n  const sendTypingEvent = () => {\r\n    if (stompClient) {\r\n      const typingData = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        status: 'TYPING',\r\n      };\r\n      stompClient.send('/app/typing', {}, JSON.stringify(typingData));\r\n    }\r\n  };\r\n\r\n  const handleTyping = (event) => {\r\n    setMessage(event.target.value);\r\n    sendTypingEvent();\r\n    if (tab !== 'CHATROOM' && seenMessages.has(tab)) {\r\n      seenMessages.delete(tab);\r\n      setSeenMessages(new Set([...seenMessages]));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Establish a socket connection when the component mounts\r\n    const newSocket = io('your_socket_server_url');\r\n    setSocket(newSocket);\r\n\r\n    // Set up event listeners\r\n    if (newSocket) {\r\n      newSocket.on('msg', (payload) => {\r\n        setMessage((prevMessages) => [...prevMessages, payload.msg]);\r\n      });\r\n    }\r\n\r\n    // Cleanup function to remove event listeners and disconnect the socket when the component unmounts\r\n    return () => {\r\n      if (newSocket) {\r\n        newSocket.disconnect();\r\n        newSocket.off('msg');\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8084/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n  };\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  };\r\n\r\n  <input\r\n    type=\"text\"\r\n    className=\"input-message\"\r\n    placeholder=\"Enter the message\"\r\n    value={userData.message}\r\n    onChange={handleMessage}\r\n    onFocus={() => {\r\n      setReceiverFocus(true);\r\n      handleFocus(); // Notify the sender when the receiver focuses\r\n    }}\r\n    onBlur={() => setReceiverFocus(false)}\r\n  />\r\n\r\n  const fetchLoggedInUsers = () => {\r\n    const token = localStorage.getItem('token');\r\n    fetch('http://localhost:8082/user/getLoggedInUsers', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setLoggedInUsers(data); // Update the state with logged-in users' data\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching logged-in users:', error);\r\n      });\r\n  };\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    stompClient.subscribe('/topic/typing', onTypingReceived);\r\n    userJoin();\r\n  };\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: 'JOIN',\r\n    };\r\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  };\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setLoggedInUsers((prevUsers) => [...prevUsers, payloadData.senderName]);\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    const senderChats = privateChats.get(payloadData.senderName) || [];\r\n    const updatedChats = [...senderChats, payloadData];\r\n    setPrivateChats(new Map(privateChats.set(payloadData.senderName, updatedChats)));\r\n    setTypingStatus('');\r\n  };\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n      console.log(chatMessage);\r\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n      setTypingStatus('');\r\n    }\r\n  };\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient && userData.username !== tab) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: 'MESSAGE',\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: '' });\r\n      setTypingStatus('');\r\n    }\r\n  };\r\n\r\n  const onTypingReceived = (payload) => {\r\n    const typingData = JSON.parse(payload.body);\r\n    if (typingData.status === 'TYPING') {\r\n      if (tab === 'CHATROOM' && typingData.receiverName === 'CHATROOM') {\r\n        setTypingStatus(typingData.senderName === userData.username ? '' : `${typingData.senderName} is typing...`);\r\n      } else if (typingData.receiverName === userData.username) {\r\n        setTypingStatus(`${typingData.senderName} is typing...`);\r\n      } else {\r\n        setTypingStatus('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMessageView = (chatId) => {\r\n    if (tab === 'CHATROOM' && chatId) {\r\n      const seenMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab, // Assuming 'tab' represents the chat room or user's name\r\n        status: 'SEEN',\r\n        messageId: chatId, // Assuming 'chatId' is the ID of the message\r\n      };\r\n      stompClient.send('/app/seen', {}, JSON.stringify(seenMessage));\r\n      // Update the seen status in the frontend\r\n      const updatedSeenMessages = new Set(seenMessages);\r\n      updatedSeenMessages.add(chatId);\r\n      setSeenMessages(updatedSeenMessages);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {stompClient && userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li\r\n                onClick={() => {\r\n                  setTab('CHATROOM');\r\n                }}\r\n                className={`member ${tab === 'CHATROOM' && 'active'}`}\r\n              >\r\n                Chatroom\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li\r\n                  onClick={() => {\r\n                    setTab(name);\r\n                  }}\r\n                  className={`member ${tab === name && 'active'}`}\r\n                  key={index}\r\n                >\r\n                  {name}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {publicChats.map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                    onClick={() => handleMessageView(chat.id)}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                    {index === publicChats.length - 1 && seenMessages.has(chat.id) && (\r\n                      <span className=\"seen-notification\">Seen</span>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <div className=\"typing-indicator\">\r\n                <p>{typingStatus}</p>\r\n              </div>\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                  onKeyDown={handleTyping}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {tab !== 'CHATROOM' && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {[...privateChats.get(tab)].map((chat, index) => (\r\n                  <li\r\n                    className={`message ${chat.senderName === userData.username && 'self'\r\n                      }`}\r\n                    key={index}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <div className=\"typing-indicator\">\r\n                <p>{typingStatus}</p>\r\n              </div>\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  onChange={handleMessage}\r\n                  onKeyDown={handleTyping}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button\"\r\n                  onClick={sendPrivateValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}